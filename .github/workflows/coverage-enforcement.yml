name: Coverage Enforcement

on:
  pull_request:
    branches: [ main ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage on PR branch
      run: npm run test:coverage
      
    - name: Read PR branch coverage
      id: pr-coverage
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          PR_COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.statements.pct);
          ")
          echo "coverage=$PR_COVERAGE" >> $GITHUB_OUTPUT
          echo "PR branch coverage: $PR_COVERAGE%"
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "No coverage file found, setting coverage to 0%"
        fi
    
    - name: Checkout main branch
      run: |
        git checkout main
        git pull origin main
    
    - name: Install dependencies for main branch
      run: npm ci
    
    - name: Run tests with coverage on main branch
      run: npm run test:coverage
      continue-on-error: true
    
    - name: Read main branch coverage
      id: main-coverage
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          MAIN_COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.statements.pct);
          ")
          echo "coverage=$MAIN_COVERAGE" >> $GITHUB_OUTPUT
          echo "Main branch coverage: $MAIN_COVERAGE%"
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "No coverage file found on main, setting coverage to 0%"
        fi
    
    - name: Checkout PR branch again
      run: |
        git checkout ${{ github.head_ref }}
    
    - name: Determine if changes are source code only
      id: changed-files
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check if any changed files are source files
        SOURCE_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(js|jsx)$' | grep -v -E '(test|spec)\.(js|jsx)$' | grep -v '__tests__' | grep -v jest.config | grep -v babel.config || true)
        
        if [ -z "$SOURCE_CHANGES" ]; then
          echo "has-source-changes=false" >> $GITHUB_OUTPUT
          echo "No source code changes detected"
        else
          echo "has-source-changes=true" >> $GITHUB_OUTPUT
          echo "Source code changes detected:"
          echo "$SOURCE_CHANGES"
        fi
    
    - name: Evaluate coverage policy
      id: policy-check
      run: |
        PR_COVERAGE="${{ steps.pr-coverage.outputs.coverage }}"
        MAIN_COVERAGE="${{ steps.main-coverage.outputs.coverage }}"
        HAS_SOURCE_CHANGES="${{ steps.changed-files.outputs.has-source-changes }}"
        
        echo "PR Coverage: $PR_COVERAGE%"
        echo "Main Coverage: $MAIN_COVERAGE%"
        echo "Has source changes: $HAS_SOURCE_CHANGES"
        
        # If no source changes, automatically pass
        if [ "$HAS_SOURCE_CHANGES" = "false" ]; then
          echo "status=pass" >> $GITHUB_OUTPUT
          echo "message=No source code changes detected. Coverage check skipped." >> $GITHUB_OUTPUT
          echo "PASS: No source code changes"
          exit 0
        fi
        
        # Apply coverage policy
        if (( $(echo "$MAIN_COVERAGE < 70" | bc -l) )); then
          # Main branch is below 70%, PR must improve coverage
          if (( $(echo "$PR_COVERAGE > $MAIN_COVERAGE" | bc -l) )); then
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "message=Coverage improved from $MAIN_COVERAGE% to $PR_COVERAGE%. Good job!" >> $GITHUB_OUTPUT
            echo "PASS: Coverage improved"
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "message=This change must improve test coverage. Please add tests, or remove code to achieve this." >> $GITHUB_OUTPUT
            echo "FAIL: Coverage must improve when below 70%"
            exit 1
          fi
        else
          # Main branch is at/above 70%, PR must maintain >= 70%
          if (( $(echo "$PR_COVERAGE >= 70" | bc -l) )); then
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "message=Coverage maintained at $PR_COVERAGE% (target: ≥70%). Well done!" >> $GITHUB_OUTPUT
            echo "PASS: Coverage maintained"
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "message=This change would lower the overall test coverage below 70%. A minimum of 70% test coverage is required." >> $GITHUB_OUTPUT
            echo "FAIL: Coverage dropped below 70%"
            exit 1
          fi
        fi
    
    - name: Create coverage comment
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const prCoverage = '${{ steps.pr-coverage.outputs.coverage }}';
          const mainCoverage = '${{ steps.main-coverage.outputs.coverage }}';
          const status = '${{ steps.policy-check.outputs.status }}';
          const message = '${{ steps.policy-check.outputs.message }}';
          const hasSourceChanges = '${{ steps.changed-files.outputs.has-source-changes }}';
          
          const coverageDiff = hasSourceChanges === 'true' ? 
            (parseFloat(prCoverage) - parseFloat(mainCoverage)).toFixed(2) : 'N/A';
          
          const statusIcon = status === 'pass' ? '✅' : '❌';
          
          let commentBody = `## Coverage Report ${statusIcon}\n\n`;
          commentBody += `**Policy Status**: ${message}\n\n`;
          commentBody += `| Branch | Coverage | Change |\n`;
          commentBody += `|--------|----------|--------|\n`;
          commentBody += `| Main | ${mainCoverage}% | - |\n`;
          commentBody += `| PR | ${prCoverage}% | ${coverageDiff !== 'N/A' ? (coverageDiff > 0 ? '+' : '') + coverageDiff + '%' : 'N/A'} |\n\n`;
          
          if (hasSourceChanges === 'false') {
            commentBody += `**Note**: This PR contains no source code changes, so coverage checks were skipped.\n\n`;
          }
          
          commentBody += `### Coverage Policy\n`;
          commentBody += `- **Target**: 70% statement coverage\n`;
          commentBody += `- **Rule**: ${parseFloat(mainCoverage) < 70 ? 'Improve coverage (main branch < 70%)' : 'Maintain coverage ≥ 70%'}\n\n`;
          commentBody += `*Coverage measured using Jest statement coverage across all source files.*`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('## Coverage Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
    
    - name: Set final status
      if: always()
      run: |
        if [ "${{ steps.policy-check.outputs.status }}" = "fail" ]; then
          echo "Coverage check failed"
          exit 1
        else
          echo "Coverage check passed"
          exit 0
        fi